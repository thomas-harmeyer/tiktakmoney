/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import { customInstance } from './lib/axiosInstance';
import type { ErrorType } from './lib/axiosInstance';
export type MakeMoveGameIdMovePost200 = string | null;

export type MakeMoveGameIdMovePostParams = {
username: string;
row: number;
col: number;
};

export type MakeBetGameIdBetPost200 = string | null;

export type MakeBetGameIdBetPostParams = {
username: string;
dollars: number;
};

export type DeleteGameGameIdDelete200 = string | null;

export type CreateGameGameIdPost200 = string | null;

export type CreateGameGameIdPostParams = {
username: string;
};

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type RoundMove = Move | null;

export type RoundBetsItem1 = number | null;

export type RoundBetsItem0 = number | null;

export interface Round {
  /**
   * @minItems 2
   * @maxItems 2
   */
  bets?: [RoundBetsItem0, RoundBetsItem1];
  move?: RoundMove;
}

export interface Player {
  money: number;
  username: string;
}

export type MovePlayerPosition = typeof MovePlayerPosition[keyof typeof MovePlayerPosition];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MovePlayerPosition = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface Move {
  col: number;
  playerPosition: MovePlayerPosition;
  row: number;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type GameWinner = number | null;

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GameState = {  winner: 'winner',
  tie: 'tie',
  betting: 'betting',
  moving: 'moving',
} as const
export type GameBoardItemItem = number | null;

export interface Game {
  readonly board: readonly GameBoardItemItem[][];
  readonly catsgame: boolean;
  /**
   * @minItems 2
   * @maxItems 2
   */
  readonly players: [Player, Player];
  rounds: Round[];
  readonly state: typeof GameState[keyof typeof GameState] ;
  /**
   * @minItems 2
   * @maxItems 2
   */
  users: [string, string];
  readonly winner: GameWinner;
}




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Create Game
 */
export const createGameGameIdPost = (
    id: string,
    params: CreateGameGameIdPostParams,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CreateGameGameIdPost200>(
      {url: `http://localhost:8000/game/${id}`, method: 'POST',
        params
    },
      options);
    }
  


export const getCreateGameGameIdPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGameGameIdPost>>, TError,{id: string;params: CreateGameGameIdPostParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createGameGameIdPost>>, TError,{id: string;params: CreateGameGameIdPostParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGameGameIdPost>>, {id: string;params: CreateGameGameIdPostParams}> = (props) => {
          const {id,params} = props ?? {};

          return  createGameGameIdPost(id,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateGameGameIdPostMutationResult = NonNullable<Awaited<ReturnType<typeof createGameGameIdPost>>>
    
    export type CreateGameGameIdPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Create Game
 */
export const useCreateGameGameIdPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createGameGameIdPost>>, TError,{id: string;params: CreateGameGameIdPostParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createGameGameIdPost>>,
        TError,
        {id: string;params: CreateGameGameIdPostParams},
        TContext
      > => {

      const mutationOptions = getCreateGameGameIdPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get Game By Id
 */
export const getGameByIdGameIdGet = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Game>(
      {url: `http://localhost:8000/game/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetGameByIdGameIdGetQueryKey = (id: string,) => {
    return [`http://localhost:8000/game/${id}`] as const;
    }

    
export const getGetGameByIdGameIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError = ErrorType<HTTPValidationError>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGameByIdGameIdGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGameByIdGameIdGet>>> = ({ signal }) => getGameByIdGameIdGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetGameByIdGameIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getGameByIdGameIdGet>>>
export type GetGameByIdGameIdGetQueryError = ErrorType<HTTPValidationError>


export function useGetGameByIdGameIdGet<TData = Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError = ErrorType<HTTPValidationError>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGameByIdGameIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetGameByIdGameIdGet<TData = Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError = ErrorType<HTTPValidationError>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGameByIdGameIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetGameByIdGameIdGet<TData = Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError = ErrorType<HTTPValidationError>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Game By Id
 */

export function useGetGameByIdGameIdGet<TData = Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError = ErrorType<HTTPValidationError>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetGameByIdGameIdGetQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetGameByIdGameIdGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError = ErrorType<HTTPValidationError>>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetGameByIdGameIdGetQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getGameByIdGameIdGet>>> = ({ signal }) => getGameByIdGameIdGet(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetGameByIdGameIdGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getGameByIdGameIdGet>>>
export type GetGameByIdGameIdGetSuspenseQueryError = ErrorType<HTTPValidationError>


export function useGetGameByIdGameIdGetSuspense<TData = Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError = ErrorType<HTTPValidationError>>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetGameByIdGameIdGetSuspense<TData = Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError = ErrorType<HTTPValidationError>>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetGameByIdGameIdGetSuspense<TData = Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError = ErrorType<HTTPValidationError>>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Game By Id
 */

export function useGetGameByIdGameIdGetSuspense<TData = Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError = ErrorType<HTTPValidationError>>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getGameByIdGameIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetGameByIdGameIdGetSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete Game
 */
export const deleteGameGameIdDelete = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DeleteGameGameIdDelete200>(
      {url: `http://localhost:8000/game/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteGameGameIdDeleteMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGameGameIdDelete>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteGameGameIdDelete>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteGameGameIdDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteGameGameIdDelete(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteGameGameIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteGameGameIdDelete>>>
    
    export type DeleteGameGameIdDeleteMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Delete Game
 */
export const useDeleteGameGameIdDelete = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteGameGameIdDelete>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteGameGameIdDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteGameGameIdDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Make Bet
 */
export const makeBetGameIdBetPost = (
    id: string,
    params: MakeBetGameIdBetPostParams,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<MakeBetGameIdBetPost200>(
      {url: `http://localhost:8000/game/${id}/bet`, method: 'POST',
        params
    },
      options);
    }
  


export const getMakeBetGameIdBetPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof makeBetGameIdBetPost>>, TError,{id: string;params: MakeBetGameIdBetPostParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof makeBetGameIdBetPost>>, TError,{id: string;params: MakeBetGameIdBetPostParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof makeBetGameIdBetPost>>, {id: string;params: MakeBetGameIdBetPostParams}> = (props) => {
          const {id,params} = props ?? {};

          return  makeBetGameIdBetPost(id,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MakeBetGameIdBetPostMutationResult = NonNullable<Awaited<ReturnType<typeof makeBetGameIdBetPost>>>
    
    export type MakeBetGameIdBetPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Make Bet
 */
export const useMakeBetGameIdBetPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof makeBetGameIdBetPost>>, TError,{id: string;params: MakeBetGameIdBetPostParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof makeBetGameIdBetPost>>,
        TError,
        {id: string;params: MakeBetGameIdBetPostParams},
        TContext
      > => {

      const mutationOptions = getMakeBetGameIdBetPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Make Move
 */
export const makeMoveGameIdMovePost = (
    id: string,
    params: MakeMoveGameIdMovePostParams,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<MakeMoveGameIdMovePost200>(
      {url: `http://localhost:8000/game/${id}/move`, method: 'POST',
        params
    },
      options);
    }
  


export const getMakeMoveGameIdMovePostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof makeMoveGameIdMovePost>>, TError,{id: string;params: MakeMoveGameIdMovePostParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof makeMoveGameIdMovePost>>, TError,{id: string;params: MakeMoveGameIdMovePostParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof makeMoveGameIdMovePost>>, {id: string;params: MakeMoveGameIdMovePostParams}> = (props) => {
          const {id,params} = props ?? {};

          return  makeMoveGameIdMovePost(id,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MakeMoveGameIdMovePostMutationResult = NonNullable<Awaited<ReturnType<typeof makeMoveGameIdMovePost>>>
    
    export type MakeMoveGameIdMovePostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Make Move
 */
export const useMakeMoveGameIdMovePost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof makeMoveGameIdMovePost>>, TError,{id: string;params: MakeMoveGameIdMovePostParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof makeMoveGameIdMovePost>>,
        TError,
        {id: string;params: MakeMoveGameIdMovePostParams},
        TContext
      > => {

      const mutationOptions = getMakeMoveGameIdMovePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
